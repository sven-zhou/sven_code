<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		 http://www.springframework.org/schema/beans 
		 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		 http://www.springframework.org/schema/context 
		 http://www.springframework.org/schema/context/spring-context-3.0.xsd
		 http://www.springframework.org/schema/tx 
		 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		 http://www.springframework.org/schema/task
		 http://www.springframework.org/schema/task/spring-task-3.0.xsd
		 http://www.springframework.org/schema/mvc
		 http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

  <context:property-placeholder location="classpath:jdbc.properties" />
  
  <!-- 扫描注解组件并且自动的注入spring beans中. 例如,他会扫描@Controller 和@Service下的文件.所以确保此base-package设置正确. -->
	<context:component-scan base-package="${codepackage}"/>
  
  	<!-- 默认的注解映射的支持 
	<mvc:annotation-driven /> -->
	
	<!--声明一个事务管理器. -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:SqlMapConfig.xml">
		</property>
		<property name="dataSource" ref="dataSource">
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="${codepackage}.dao" />
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
        <!--maxIdle: 最大空闲连接-->    
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
        <!--minIdle: 最小空闲连接-->    
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!--maxActive: 最大连接数量-->    
		<property name="maxActive" value="${jdbc.maxActive}"></property>
        <!--initialSize: 初始化连接-->    
		<property name="initialSize" value="${jdbc.initialSize}"></property>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->  
        <property name="maxWait" value="1000"/>  
        
        <!-- 连接被泄露时是否打印 -->  
        <property name="logAbandoned" value="true"/>  
        <!--removeAbandoned: 是否自动回收超时连接-->    
        <property name="removeAbandoned"  value="true"/>  
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
        <property name="removeAbandonedTimeout" value="60"/>  
        <!--  验证sql 必须是 select --> 
		<property name="validationQuery" value="SELECT 1 FROM DUAL"/>
		
		<!--  默认值是 false, 当连接池中的空闲连接是否有效 -->
		<property name= "testWhileIdle" value="true"></property>
		<!-- 默认值是 true ，当从连接池取连接时，验证这个连接是否有效 -->
		<property name= "testOnBorrow" value="false"></property>
		<!-- 默认值是 flase, 当从把该连接放回到连接池的时，验证这个连接是否有效 -->
		<property name= "testOnReturn" value="false"></property>
		<property name= "validationQueryTimeout" value="1"></property>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位.即每隔多长时间验证 -->  
        <property name="timeBetweenEvictionRunsMillis" value="1000"/>  
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="${jdbc.maxActive}"/>  
		
	</bean>
    
</beans>